#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <sstream>

using namespace std;

// Custom SHA-256 Hashing Algorithm
string sha256(const string &password) {
    const unsigned int k[64] = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

    stringstream ss;
    for (char c : password) {
        ss << hex << (int)c;
    }

    string hashed = ss.str();
    for (int i = 0; i < 64; i++) {
        hashed[i % hashed.length()] ^= k[i];
    }

    return hashed.substr(0, 64);
}

// Generate a 6-digit OTP
int generateOTP() {
    srand(time(0));
    return 100000 + rand() % 900000;
}

// Generate a simple CAPTCHA (Math problem)
bool captchaVerification() {
    srand(time(0));
    int num1 = rand() % 10 + 1;
    int num2 = rand() % 10 + 1;
    int result;
    cout << "CAPTCHA: Solve " << num1 << " + " << num2 << " = ";
    cin >> result;
    return (result == num1 + num2);
}

// Generate a passkey for each user (simulated as a unique string)
string generatePasskey() {
    srand(time(0));
    string passkey = "PK";
    for (int i = 0; i < 5; i++) {
        passkey += 'A' + rand() % 26;
    }
    return passkey;
}

// Register a user with passkey and hashed password
void registerUser() {
    string username, password, passkey;
    cout << "Enter username: ";
    cin >> username;
    cout << "Enter password: ";
    cin >> password;

    passkey = generatePasskey(); // Generate unique passkey

    ofstream file("users.db", ios::app);
    if (file.is_open()) {
        file << username << " " << sha256(password) << " " << passkey << endl;
        cout << "User registered successfully! Your Passkey is: " << passkey << endl;
    } else {
        cerr << "Error opening file!\n";
    }
    file.close();
}

// Login function with password, CAPTCHA, OTP, and passkey verification
bool loginUser() {
    string username, password, storedUser, storedHash, storedPasskey;
    cout << "Enter username: ";
    cin >> username;
    cout << "Enter password: ";
    cin >> password;

    ifstream file("users.db");
    bool authenticated = false;

    while (file >> storedUser >> storedHash >> storedPasskey) {
        if (storedUser == username && storedHash == sha256(password)) {
            authenticated = true;
            break;
        }
    }
    file.close();

    if (!authenticated) {
        cout << "Invalid credentials!\n";
        return false;
    }

    // CAPTCHA Verification
    if (!captchaVerification()) {
        cout << "CAPTCHA Failed! Access Denied.\n";
        return false;
    }

    // Generate OTP for 2FA
    int otp = generateOTP();
    cout << "Your OTP is: " << otp << endl;
    int enteredOTP;
    cout << "Enter OTP: ";
    cin >> enteredOTP;

    if (enteredOTP != otp) {
        cout << "Invalid OTP! Access Denied.\n";
        return false;
    }

    // Passkey verification
    string enteredPasskey;
    cout << "Enter your Passkey: ";
    cin >> enteredPasskey;

    if (enteredPasskey != storedPasskey) {
        cout << "Invalid Passkey! Access Denied.\n";
        return false;
    }

    cout << "Login Successful!\n";
    return true;
}

int main() {
    int choice;

    do {
        cout << "\n1. Register\n2. Login\n3. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                registerUser();
                break;
            case 2:
                if (loginUser()) {
                    cout << "Welcome to the Secure System!\n";
                }
                break;
            case 3:
                cout << "Exiting...\n";
                return 0;
            default:
                cout << "Invalid choice!\n";
        }
    } while (true);

    return 0;
}
